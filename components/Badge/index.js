function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}import React from"react";import PropTypes from"prop-types";import merge from"deepmerge";import classnames from"classnames";import{twMerge}from"tailwind-merge";import findMatch from"../../utils/findMatch";import objectsToString from"../../utils/objectsToString";import{useTheme}from"../../context/theme";import{propTypesColor,propTypesInvisible,propTypesWithBorder,propTypesOverlap,propTypesClassName,propTypesContent,propTypesChildren,propTypesPlacement,propTypesContainerProps,propTypesContainerRef}from"../../types/components/badge";export var Badge=React.forwardRef(function(_param,ref){var color=_param.color,invisible=_param.invisible,withBorder=_param.withBorder,overlap=_param.overlap,placement=_param.placement,className=_param.className,content=_param.content,children=_param.children,containerProps=_param.containerProps,containerRef=_param.containerRef,rest=_objectWithoutProperties(_param,["color","invisible","withBorder","overlap","placement","className","content","children","containerProps","containerRef"]);var badge=useTheme().badge;var valid=badge.valid,defaultProps=badge.defaultProps,styles=badge.styles;var base=styles.base,placements=styles.placements,colors=styles.colors;color=color!==null&&color!==void 0?color:defaultProps.color;invisible=invisible!==null&&invisible!==void 0?invisible:defaultProps.invisible;withBorder=withBorder!==null&&withBorder!==void 0?withBorder:defaultProps.withBorder;overlap=overlap!==null&&overlap!==void 0?overlap:defaultProps.overlap;placement=placement!==null&&placement!==void 0?placement:defaultProps.placement;className=twMerge(defaultProps.className||"",className);var _merge;containerProps=(_merge=merge(containerProps,defaultProps.containerProps||{}))!==null&&_merge!==void 0?_merge:defaultProps.containerProps;var badgeInitialClasses=objectsToString(base.badge.initial);var badgeWithBorderClasses=objectsToString(base.badge.withBorder);var badgeWithContentClasses=objectsToString(base.badge.withContent);var badgeColorClasses=objectsToString(colors[findMatch(valid.colors,color,"red")]);var badgePlacementClasses=objectsToString(placements[findMatch(valid.placements,placement,"top-end")][findMatch(valid.overlaps,overlap,"square")]);var _obj;var badgeClasses=twMerge(classnames(badgeInitialClasses,badgePlacementClasses,badgeColorClasses,(_obj={},_defineProperty(_obj,badgeWithBorderClasses,withBorder),_defineProperty(_obj,badgeWithContentClasses,content),_obj)),className);var badgeContainerClasses=twMerge(classnames(objectsToString(base.container),containerProps===null||containerProps===void 0?void 0:containerProps.className));return React.createElement("div",_extends({ref:containerRef},containerProps,{className:badgeContainerClasses}),children,!invisible&&React.createElement("span",_extends({},rest,{ref:ref,className:badgeClasses}),content))});Badge.propTypes={color:PropTypes.oneOf(propTypesColor),invisible:propTypesInvisible,withBorder:propTypesWithBorder,overlap:PropTypes.oneOf(propTypesOverlap),className:propTypesClassName,content:propTypesContent,children:propTypesChildren,placement:PropTypes.oneOf(propTypesPlacement),containerProps:propTypesContainerProps,containerRef:propTypesContainerRef};Badge.displayName="MaterialTailwind.Badge";export default Badge;