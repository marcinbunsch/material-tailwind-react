function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}import React from"react";import PropTypes from"prop-types";import Ripple from"material-ripple-effects";import classnames from"classnames";import{twMerge}from"tailwind-merge";import findMatch from"../../utils/findMatch";import objectsToString from"../../utils/objectsToString";import{useTheme}from"../../context/theme";import{propTypesColor,propTypesLabel,propTypesRipple,propTypesClassName,propTypesDisabled,propTypesObject}from"../../types/components/checkbox";export var Switch=React.forwardRef(function(_param,ref){var color=_param.color,label=_param.label,ripple=_param.ripple,className=_param.className,disabled=_param.disabled,containerProps=_param.containerProps,circleProps=_param.circleProps,labelProps=_param.labelProps,inputRef=_param.inputRef,rest=_objectWithoutProperties(_param,["color","label","ripple","className","disabled","containerProps","circleProps","labelProps","inputRef"]);var _useTheme=useTheme(),toggle=_useTheme.switch;var defaultProps=toggle.defaultProps,valid=toggle.valid,styles=toggle.styles;var base=styles.base,colors=styles.colors;var switchId=React.useId();color=color!==null&&color!==void 0?color:defaultProps.color;ripple=ripple!==null&&ripple!==void 0?ripple:defaultProps.ripple;disabled=disabled!==null&&disabled!==void 0?disabled:defaultProps.disabled;containerProps=containerProps!==null&&containerProps!==void 0?containerProps:defaultProps.containerProps;labelProps=labelProps!==null&&labelProps!==void 0?labelProps:defaultProps.labelProps;circleProps=circleProps!==null&&circleProps!==void 0?circleProps:defaultProps.circleProps;className=twMerge(defaultProps.className||"",className);var rippleEffect=ripple!==undefined&&new Ripple;var rootClasses=classnames(objectsToString(base.root),_defineProperty({},objectsToString(base.disabled),disabled));var containerClasses=twMerge(classnames(objectsToString(base.container)),containerProps===null||containerProps===void 0?void 0:containerProps.className);var inputClasses=twMerge(classnames(objectsToString(base.input),objectsToString(colors[findMatch(valid.colors,color,"gray")])),className);var circleClasses=twMerge(classnames(objectsToString(base.circle),colors[findMatch(valid.colors,color,"gray")].circle,colors[findMatch(valid.colors,color,"gray")].before),circleProps===null||circleProps===void 0?void 0:circleProps.className);var rippleClasses=classnames(objectsToString(base.ripple));var labelClasses=twMerge(classnames(objectsToString(base.label)),labelProps===null||labelProps===void 0?void 0:labelProps.className);return React.createElement("div",{ref:ref,className:rootClasses},React.createElement("div",_extends({},containerProps,{className:containerClasses}),React.createElement("input",_extends({},rest,{ref:inputRef,type:"checkbox",disabled:disabled,id:rest.id||switchId,className:inputClasses})),React.createElement("label",_extends({},circleProps,{htmlFor:rest.id||switchId,className:circleClasses}),ripple&&React.createElement("div",{className:rippleClasses,onMouseDown:function(e){var onMouseDown=containerProps===null||containerProps===void 0?void 0:containerProps.onMouseDown;if(ripple){rippleEffect.create(e,"dark")}return typeof onMouseDown==="function"&&onMouseDown(e)}}))),label&&React.createElement("label",_extends({},labelProps,{htmlFor:rest.id||switchId,className:labelClasses}),label))});Switch.propTypes={color:PropTypes.oneOf(propTypesColor),label:propTypesLabel,ripple:propTypesRipple,className:propTypesClassName,disabled:propTypesDisabled,containerProps:propTypesObject,labelProps:propTypesObject,circleProps:propTypesObject};Switch.displayName="MaterialTailwind.Switch";export default Switch;