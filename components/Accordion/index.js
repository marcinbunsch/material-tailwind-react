function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}import React from"react";import classnames from"classnames";import{twMerge}from"tailwind-merge";import objectsToString from"../../utils/objectsToString";import{useTheme}from"../../context/theme";import{AccordionContextProvider,useAccordion}from"./AccordionContext";import{propTypesOpen,propTypesIcon,propTypesAnimate,propTypesDisabled,propTypesClassName,propTypesChildren}from"../../types/components/accordion";import{AccordionHeader}from"./AccordionHeader";import{AccordionBody}from"./AccordionBody";var Accordion=React.forwardRef(function(_param,ref){var open=_param.open,icon=_param.icon,animate=_param.animate,className=_param.className,disabled=_param.disabled,children=_param.children,rest=_objectWithoutProperties(_param,["open","icon","animate","className","disabled","children"]);var accordion=useTheme().accordion;var defaultProps=accordion.defaultProps,base=accordion.styles.base;icon=icon!==null&&icon!==void 0?icon:defaultProps.icon;animate=animate!==null&&animate!==void 0?animate:defaultProps.animate;disabled=disabled!==null&&disabled!==void 0?disabled:defaultProps.disabled;className=twMerge(defaultProps.className||"",className);var accordionClasses=twMerge(classnames(objectsToString(base.container),_defineProperty({},objectsToString(base.disabled),disabled)),className);var contextValue=React.useMemo(function(){return{open:open,icon:icon,animate:animate,disabled:disabled}},[open,icon,animate,disabled]);return React.createElement(AccordionContextProvider,{value:contextValue},React.createElement("div",_extends({},rest,{ref:ref,className:accordionClasses}),children))});Accordion.propTypes={open:propTypesOpen,icon:propTypesIcon,animate:propTypesAnimate,disabled:propTypesDisabled,className:propTypesClassName,children:propTypesChildren};Accordion.displayName="MaterialTailwind.Accordion";export{Accordion,AccordionHeader,AccordionBody,useAccordion};export default Object.assign(Accordion,{Header:AccordionHeader,Body:AccordionBody});