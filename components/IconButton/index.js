function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}import React from"react";import PropTypes from"prop-types";import Ripple from"material-ripple-effects";import classnames from"classnames";import{twMerge}from"tailwind-merge";import findMatch from"../../utils/findMatch";import objectsToString from"../../utils/objectsToString";import{useTheme}from"../../context/theme";import{propTypesVariant,propTypesSize,propTypesColor,propTypesRipple,propTypesClassName,propTypesChildren}from"../../types/components/button";export var IconButton=React.forwardRef(function(_param,ref){var variant=_param.variant,size=_param.size,color=_param.color,ripple=_param.ripple,className=_param.className,children=_param.children,fullWidth=_param.fullWidth,rest=_objectWithoutProperties(_param,["variant","size","color","ripple","className","children","fullWidth"]);var iconButton=useTheme().iconButton;var valid=iconButton.valid,defaultProps=iconButton.defaultProps,styles=iconButton.styles;var base=styles.base,variants=styles.variants,sizes=styles.sizes;variant=variant!==null&&variant!==void 0?variant:defaultProps.variant;size=size!==null&&size!==void 0?size:defaultProps.size;color=color!==null&&color!==void 0?color:defaultProps.color;ripple=ripple!==null&&ripple!==void 0?ripple:defaultProps.ripple;className=twMerge(defaultProps.className||"",className);var rippleEffect=ripple!==undefined&&new Ripple;var buttonBase=objectsToString(base);var buttonVariant=objectsToString(variants[findMatch(valid.variants,variant,"filled")][findMatch(valid.colors,color,"gray")]);var buttonSize=objectsToString(sizes[findMatch(valid.sizes,size,"md")]);var classes=twMerge(classnames(buttonBase,buttonSize,buttonVariant),className);return React.createElement("button",_extends({},rest,{ref:ref,className:classes,type:rest.type||"button",onMouseDown:function(e){var onMouseDown=rest===null||rest===void 0?void 0:rest.onMouseDown;if(ripple){rippleEffect.create(e,(variant==="filled"||variant==="gradient")&&color!=="white"?"light":"dark")}return typeof onMouseDown==="function"&&onMouseDown(e)}}),React.createElement("span",{className:"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform"},children))});IconButton.propTypes={variant:PropTypes.oneOf(propTypesVariant),size:PropTypes.oneOf(propTypesSize),color:PropTypes.oneOf(propTypesColor),ripple:propTypesRipple,className:propTypesClassName,children:propTypesChildren};IconButton.displayName="MaterialTailwind.IconButton";export default IconButton;