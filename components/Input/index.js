function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}import React from"react";import PropTypes from"prop-types";import classnames from"classnames";import findMatch from"../../utils/findMatch";import objectsToString from"../../utils/objectsToString";import{useTheme}from"../../context/theme";import{propTypesVariant,propTypesColor,propTypesSize,propTypesLabel,propTypesError,propTypesSuccess,propTypesIcon,propTypesLabelProps,propTypesContainerProps,propTypesShrink,propTypesClassName}from"../../types/components/input";import{twMerge}from"tailwind-merge";export var Input=React.forwardRef(function(_param,ref){var variant=_param.variant,color=_param.color,size=_param.size,label=_param.label,error=_param.error,success=_param.success,icon=_param.icon,containerProps=_param.containerProps,labelProps=_param.labelProps,className=_param.className,shrink=_param.shrink,inputRef=_param.inputRef,rest=_objectWithoutProperties(_param,["variant","color","size","label","error","success","icon","containerProps","labelProps","className","shrink","inputRef"]);var input=useTheme().input;var defaultProps=input.defaultProps,valid=input.valid,styles=input.styles;var base=styles.base,variants=styles.variants;variant=variant!==null&&variant!==void 0?variant:defaultProps.variant;size=size!==null&&size!==void 0?size:defaultProps.size;color=color!==null&&color!==void 0?color:defaultProps.color;label=label!==null&&label!==void 0?label:defaultProps.label;labelProps=labelProps!==null&&labelProps!==void 0?labelProps:defaultProps.labelProps;containerProps=containerProps!==null&&containerProps!==void 0?containerProps:defaultProps.containerProps;shrink=shrink!==null&&shrink!==void 0?shrink:defaultProps.shrink;icon=icon!==null&&icon!==void 0?icon:defaultProps.icon;className=twMerge(defaultProps.className||"",className);var inputVariant=variants[findMatch(valid.variants,variant,"outlined")];var inputSize=inputVariant.sizes[findMatch(valid.sizes,size,"md")];var inputError=objectsToString(inputVariant.error.input);var inputSuccess=objectsToString(inputVariant.success.input);var inputShrink=objectsToString(inputVariant.shrink.input);var inputColor=objectsToString(inputVariant.colors.input[findMatch(valid.colors,color,"gray")]);var labelError=objectsToString(inputVariant.error.label);var labelSuccess=objectsToString(inputVariant.success.label);var labelShrink=objectsToString(inputVariant.shrink.label);var labelColor=objectsToString(inputVariant.colors.label[findMatch(valid.colors,color,"gray")]);var containerClasses=classnames(objectsToString(base.container),objectsToString(inputSize.container),containerProps===null||containerProps===void 0?void 0:containerProps.className);var inputClasses=classnames(objectsToString(base.input),objectsToString(inputVariant.base.input),objectsToString(inputSize.input),_defineProperty({},objectsToString(inputVariant.base.inputWithIcon),icon),_defineProperty({},inputColor,!error&&!success),_defineProperty({},inputError,error),_defineProperty({},inputSuccess,success),_defineProperty({},inputShrink,shrink),className);var labelClasses=classnames(objectsToString(base.label),objectsToString(inputVariant.base.label),objectsToString(inputSize.label),_defineProperty({},labelColor,!error&&!success),_defineProperty({},labelError,error),_defineProperty({},labelSuccess,success),_defineProperty({},labelShrink,shrink),labelProps===null||labelProps===void 0?void 0:labelProps.className);var iconClasses=classnames(objectsToString(base.icon),objectsToString(inputVariant.base.icon),objectsToString(inputSize.icon));var asteriskClasses=classnames(objectsToString(base.asterisk));return React.createElement("div",_extends({},containerProps,{ref:ref,className:containerClasses}),icon&&React.createElement("div",{className:iconClasses},icon),React.createElement("input",_extends({},rest,{ref:inputRef,className:inputClasses,placeholder:(rest===null||rest===void 0?void 0:rest.placeholder)||" "})),React.createElement("label",_extends({},labelProps,{className:labelClasses}),label," ",rest.required?React.createElement("span",{className:asteriskClasses},"*"):""))});Input.propTypes={variant:PropTypes.oneOf(propTypesVariant),size:PropTypes.oneOf(propTypesSize),color:PropTypes.oneOf(propTypesColor),label:propTypesLabel,error:propTypesError,success:propTypesSuccess,icon:propTypesIcon,labelProps:propTypesLabelProps,containerProps:propTypesContainerProps,shrink:propTypesShrink,className:propTypesClassName};Input.displayName="MaterialTailwind.Input";export default Input;