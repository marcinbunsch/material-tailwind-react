function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function _iterableToArrayLimit(arr,i){var _i=arr==null?null:typeof Symbol!=="undefined"&&arr[Symbol.iterator]||arr["@@iterator"];if(_i==null)return;var _arr=[];var _n=true;var _d=false;var _s,_e;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(n);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}import React from"react";import{offset as fuiOffset,flip,shift,autoUpdate,useFloating,useFloatingNodeId,useInteractions,useDismiss,safePolygon,useHover,FloatingNode}from"@floating-ui/react";import{useTheme}from"../../context/theme";import merge from"deepmerge";import{propTypesOpen,propTypesHanlder,propTypesPlacement,propTypesOffset,propTypesDismiss,propTypesClassName,propTypesChildren,propTypesAnimate}from"../../types/components/speedDial";import SpeedDialHandler from"./SpeedDialHandler";import SpeedDialContent from"./SpeedDialContent";import SpeedDialAction from"./SpeedDialAction";export var SpeedDialContext=React.createContext(null);export function useSpeedDial(){var context=React.useContext(SpeedDialContext);if(!context){throw new Error("useSpeedDial must be used within a <SpeedDial />.")}return context}function SpeedDial(param){var open=param.open,handler=param.handler,placement=param.placement,offset=param.offset,dismiss=param.dismiss,animate=param.animate,children=param.children;var _useTheme=useTheme(),defaultProps=_useTheme.speedDial.defaultProps;var _React_useState=_slicedToArray(React.useState(false),2),internalOpen=_React_useState[0],setInternalOpen=_React_useState[1];open=open!==null&&open!==void 0?open:internalOpen;handler=handler!==null&&handler!==void 0?handler:setInternalOpen;placement=placement!==null&&placement!==void 0?placement:defaultProps.placement;offset=offset!==null&&offset!==void 0?offset:defaultProps.offset;dismiss=dismiss!==null&&dismiss!==void 0?dismiss:defaultProps.dismiss;animate=animate!==null&&animate!==void 0?animate:defaultProps.animate;var animation={unmount:{opacity:0,transform:"scale(0.5)",transition:{duration:.2}},mount:{opacity:1,transform:"scale(1)",transition:{duration:.2}}};var appliedAnimation=merge(animation,animate);var nodeId=useFloatingNodeId();var _useFloating=useFloating({open:open,nodeId:nodeId,placement:placement,onOpenChange:handler,whileElementsMounted:autoUpdate,middleware:[fuiOffset(offset),flip(),shift()]}),x=_useFloating.x,y=_useFloating.y,strategy=_useFloating.strategy,refs=_useFloating.refs,context=_useFloating.context;var _useInteractions=useInteractions([useHover(context,{handleClose:safePolygon()}),useDismiss(context,dismiss)]),getReferenceProps=_useInteractions.getReferenceProps,getFloatingProps=_useInteractions.getFloatingProps;var contextValue=React.useMemo(function(){return{x:x,y:y,strategy:strategy,refs:refs,open:open,context:context,getReferenceProps:getReferenceProps,getFloatingProps:getFloatingProps,animation:appliedAnimation}},[context,getFloatingProps,getReferenceProps,refs,strategy,x,y,open,appliedAnimation]);return React.createElement(SpeedDialContext.Provider,{value:contextValue},React.createElement("div",{className:"group"},React.createElement(FloatingNode,{id:nodeId},children)))}SpeedDial.propTypes={open:propTypesOpen,handler:propTypesHanlder,placement:propTypesPlacement,offset:propTypesOffset,dismiss:propTypesDismiss,className:propTypesClassName,children:propTypesChildren,animate:propTypesAnimate};SpeedDial.displayName="MaterialTailwind.SpeedDial";export{SpeedDial,SpeedDialHandler,SpeedDialContent,SpeedDialAction};export default Object.assign(SpeedDial,{Handler:SpeedDialHandler,Content:SpeedDialContent,Action:SpeedDialAction});