function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}import React from"react";import PropTypes from"prop-types";import{AnimatePresence,m,LazyMotion,domAnimation}from"framer-motion";import classnames from"classnames";import merge from"deepmerge";import{twMerge}from"tailwind-merge";import findMatch from"../../utils/findMatch";import objectsToString from"../../utils/objectsToString";import{useTheme}from"../../context/theme";import{propTypesVariant,propTypesColor,propTypesIcon,propTypesOpen,propTypesOnClose,propTypesAction,propTypesAnimate,propTypesClassName,propTypesValue,propTypesSize}from"../../types/components/chip";import IconButton from"../IconButton";export var Chip=React.forwardRef(function(_param,ref){var variant=_param.variant,size=_param.size,color=_param.color,icon=_param.icon,open=_param.open,onClose=_param.onClose,action=_param.action,animate=_param.animate,className=_param.className,value=_param.value,rest=_objectWithoutProperties(_param,["variant","size","color","icon","open","onClose","action","animate","className","value"]);var chip=useTheme().chip;var defaultProps=chip.defaultProps,valid=chip.valid,styles=chip.styles;var base=styles.base,variants=styles.variants,sizes=styles.sizes;variant=variant!==null&&variant!==void 0?variant:defaultProps.variant;size=size!==null&&size!==void 0?size:defaultProps.size;color=color!==null&&color!==void 0?color:defaultProps.color;animate=animate!==null&&animate!==void 0?animate:defaultProps.animate;open=open!==null&&open!==void 0?open:defaultProps.open;action=action!==null&&action!==void 0?action:defaultProps.action;onClose=onClose!==null&&onClose!==void 0?onClose:defaultProps.onClose;className=twMerge(defaultProps.className||"",className);var chipBase=objectsToString(base.chip);var chipAction=objectsToString(base.action);var chipIcon=objectsToString(base.icon);var chipVariant=objectsToString(variants[findMatch(valid.variants,variant,"filled")][findMatch(valid.colors,color,"gray")]);var chipSize=objectsToString(sizes[findMatch(valid.sizes,size,"md")]["chip"]);var actionSize=objectsToString(sizes[findMatch(valid.sizes,size,"md")]["action"]);var iconSize=objectsToString(sizes[findMatch(valid.sizes,size,"md")]["icon"]);var classes=twMerge(classnames(chipBase,chipVariant,chipSize),className);var actionClasses=classnames(chipAction,actionSize);var iconClasses=classnames(chipIcon,iconSize);var contentClasses=classnames({"ml-4":icon&&size==="sm","ml-[18px]":icon&&size==="md","ml-5":icon&&size==="lg","mr-5":onClose});var mainAnimation={unmount:{opacity:0},mount:{opacity:1}};var appliedAnimation=merge(mainAnimation,animate);var iconTemplate=React.createElement("div",{className:iconClasses},icon);var NewAnimatePresence=AnimatePresence;return React.createElement(LazyMotion,{features:domAnimation},React.createElement(NewAnimatePresence,null,open&&React.createElement(m.div,_extends({},rest,{ref:ref,className:classes,initial:"unmount",exit:"unmount",animate:open?"mount":"unmount",variants:appliedAnimation}),icon&&iconTemplate,React.createElement("span",{className:contentClasses},value),onClose&&!action&&React.createElement(IconButton,{onClick:onClose,size:"sm",variant:"text",color:variant==="outlined"||variant==="ghost"?color:"white",className:actionClasses},React.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",className:classnames({"h-3.5 w-3.5":size==="sm","h-4 w-4":size==="md","h-5 w-5":size==="lg"}),strokeWidth:2},React.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M6 18L18 6M6 6l12 12"}))),action||null)))});Chip.propTypes={variant:PropTypes.oneOf(propTypesVariant),size:PropTypes.oneOf(propTypesSize),color:PropTypes.oneOf(propTypesColor),icon:propTypesIcon,open:propTypesOpen,onClose:propTypesOnClose,action:propTypesAction,animate:propTypesAnimate,className:propTypesClassName,value:propTypesValue};Chip.displayName="MaterialTailwind.Chip";export default Chip;