function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&iter[Symbol.iterator]!=null||iter["@@iterator"]!=null)return Array.from(iter)}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread()}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(n);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}import PropTypes from"prop-types";import{propTypesColors}from"../generic";export var propTypesVariant=["standard","outlined","static"];export var propTypesSize=["md","lg"];export var propTypesColor=["black","white"].concat(_toConsumableArray(propTypesColors));export var propTypesLabel=PropTypes.string;export var propTypesError=PropTypes.bool;export var propTypesSuccess=PropTypes.bool;export var propTypesIcon=PropTypes.node;export var propTypesResize=PropTypes.bool;export var propTypesLabelProps=PropTypes.instanceOf(Object);export var propTypesContainerProps=PropTypes.instanceOf(Object);export var propTypesShrink=PropTypes.bool;export var propTypesClassName=PropTypes.string;